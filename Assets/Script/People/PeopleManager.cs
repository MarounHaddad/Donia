using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PeopleManager : MonoBehaviour
{


	//map Object Used To Capture the main assets of the map
	private Map map;
	//
	private TimeCounter timeCounter;

	//List of People that can be generated by the
	public GameObject currentPerson;

	//List of People that can be generated by the
	public List<GameObject> people;

	//The Number of Weeks On which the service is distributed
	public int generateCycleWeeks = 1;

	void Awake ()
	{
		//initiate the map object
		map = GameObject.FindGameObjectWithTag ("Map").GetComponent<Map> ();
		timeCounter = new TimeCounter (map);
	}

	// Use this for initialization
	void Start ()
	{
	}
	
	// Update is called once per frame
	void Update ()
	{
		timeCounter.UpdateSeconds ();
		GeneratePeople ();
	}

	private void GeneratePeople ()
	{
		//if not people Gameobjects are set to be generated do not proceed
		if (people == null)
			return;
		
		//if not people Gameobjects are set to be generated do not proceed
		if (people.Count == 0)
			return;

		//if the building is in Hover Mode do not proceed
		if (GetComponent<HoverObject> ().enabled)
			return;

		//if it is not time to generate people, do not proceed
		if (!timeCounter.CheckCycle (generateCycleWeeks))
			return;

		//if the building provides services and cannot provide service do not proceed
		if (GetComponent<BuildingService> () != null)
		if (!GetComponent<BuildingService> ().CanProvideService ()) {
			Destroy (currentPerson);
			currentPerson = null;
			return;
		}
			
		//if the building is diseased do not proceed
		if (GetComponent<BuildingHouse> () != null)
		if (GetComponent<BuildingHouse> ().IsDiseased())
			return;

		//if the generated object does not have citizen walk attached to it
		//do not destroy the object (to be handled by that object script)
		if (currentPerson != null)
		if (currentPerson.GetComponent <CitizenWalk> () == null)
			return;

		//do not destroy the object if it has the property can Destory = false
		if (currentPerson != null)
		if (!currentPerson.GetComponent <CitizenWalk> ().canDestroy)
			return;

			//one in 10 destroy the person to generate a new one
			int tryDestroy = Mathf.RoundToInt (Random.Range (0, 10));
			if (tryDestroy == 0) {
				Destroy (currentPerson);
				currentPerson = null;
			}


		//one in 10 destroy the person to generate a new one
		if (GetComponent<BuildingHouse> () != null)
		if (!GetComponent<BuildingHouse> ().Occupied)
			return;
		
		//Generate a Random person out of the people list
		int index = Mathf.RoundToInt (Random.Range (0f, people.Count - 1));
		GameObject newPerson = people [index];
			
		GeneratePerson (BuildingManager.Directions.Right, newPerson);
		GeneratePerson (BuildingManager.Directions.Down, newPerson);
		GeneratePerson (BuildingManager.Directions.Left, newPerson);
		GeneratePerson (BuildingManager.Directions.Up, newPerson);
			
	}

	private void GeneratePerson (BuildingManager.Directions direction, GameObject person , bool flip = false)
	{
		try {

			if (currentPerson != null)
				return;
			
			//Get the List of Roads according to the direction
			//Top,Down,Right,Left
			List<GameObject> roads = map.buildingManager.CheckPlot (
				                         GetComponent<WorldObject> ().objectPlots,
				                         GetComponent<WorldObject> ().objectComponents, 
				                         direction, 
				                         map.roadTag);

			//if no roads are found surrounding the house, do not continue
			if (roads.Count == 0)
				return;

			//generate a new person on the proper road position	(first found Road)
			currentPerson = (GameObject)(GameObject.Instantiate (person,
				roads [0].transform.position, Quaternion.Euler (new Vector3 (0, 45, 0))));
					
			//Set the person in the proper sorting order
			currentPerson.GetComponent<SpriteRenderer> ().sortingOrder = -(int)(currentPerson.transform.position.x + currentPerson.transform.position.z + 1);

			//flip the Sprite (usually used for Right and Left Directions when the person is static (Not Moving)
			if (flip)
				currentPerson.GetComponent<SpriteRenderer> ().flipX = flip;

			//Set the parent building of the person to the current Building that generated that person
			currentPerson.GetComponent<WorldObject>().parentBuilding = gameObject;

		} catch (System.Exception ex) {
			Debug.Log (ex.Message);
		}
	}

	public void GenerateSpecialPerson (GameObject specialPerson)
	{
		try {

			if (GetComponent<BuildingHouse> () == null)
				return;

			if (specialPerson == null)
				return;

			if (currentPerson != null){
				Destroy (currentPerson);
				currentPerson =null;
			}

			GeneratePerson (BuildingManager.Directions.Right, specialPerson);
			GeneratePerson (BuildingManager.Directions.Down, specialPerson,true);
			GeneratePerson (BuildingManager.Directions.Left, specialPerson);
			GeneratePerson (BuildingManager.Directions.Up, specialPerson,true);

		} catch (System.Exception ex) {
			Debug.Log (ex.Message);
		}
	}



}
